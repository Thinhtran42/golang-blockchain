version: '3.8'

services:
  node1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ID: node1
      IS_LEADER: 'true'
      PORT: '50051'
      PEERS: 'node2:50051,node3:50051'
    ports:
      - '50051:50051'
      - '8081:8080' # For future REST API
    volumes:
      - node1_data:/app/data
    networks:
      - blockchain_network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '50051']
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  node2:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ID: node2
      IS_LEADER: 'false'
      PORT: '50051'
      PEERS: 'node1:50051,node3:50051'
    ports:
      - '50052:50051'
      - '8082:8080'
    volumes:
      - node2_data:/app/data
    networks:
      - blockchain_network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '50051']
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    depends_on:
      - node1

  node3:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ID: node3
      IS_LEADER: 'false'
      PORT: '50051'
      PEERS: 'node1:50051,node2:50051'
    ports:
      - '50053:50051'
      - '8083:8080'
    volumes:
      - node3_data:/app/data
    networks:
      - blockchain_network
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '50051']
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    depends_on:
      - node1

volumes:
  node1_data:
    driver: local
  node2_data:
    driver: local
  node3_data:
    driver: local

networks:
  blockchain_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
