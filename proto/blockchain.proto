syntax = "proto3";

package blockchain;

option go_package = "./proto";

message Transaction {
  bytes sender = 1;
  bytes receiver = 2;
  double amount = 3;
  int64 timestamp = 4;
  bytes signature = 5;
}

message Block {
  repeated Transaction transactions = 1;
  bytes merkle_root = 2;
  bytes previous_block_hash = 3;
  bytes current_block_hash = 4;
  int64 timestamp = 5;
  int32 height = 6;
}

message SubmitTransactionRequest {
  Transaction transaction = 1;
}

message SubmitTransactionResponse {
  bool success = 1;
  string message = 2;
}

message ProposeBlockRequest {
  Block block = 1;
  string proposer_id = 2;
}

message ProposeBlockResponse {
  bool success = 1;
  string message = 2;
}

message Vote {
  string node_id = 1;
  bytes block_hash = 2;
  bool approve = 3;
  int64 timestamp = 4;
}

message VoteRequest {
  Vote vote = 1;
}

message VoteResponse {
  bool success = 1;
  string message = 2;
}

message CommitBlockRequest {
  Block block = 1;
}

message CommitBlockResponse {
  bool success = 1;
  string message = 2;
}

message GetLatestBlockRequest {
  string node_id = 1;
}

message GetLatestBlockResponse {
  Block block = 1;
  int32 height = 2;
  bool success = 3;
}

message StatusRequest {
  string node_id = 1;
}

message StatusResponse {
  string node_id = 1;
  bool is_leader = 2;
  int32 current_height = 3;
  int32 tx_pool_size = 4;
}

message GetBlockRequest {
    int32 height = 1;
    string node_id = 2;
}

message GetBlockResponse {
    Block block = 1;
    bool success = 2;
    string message = 3;
}

message HealthCheckRequest {
    string node_id = 1;
}

message HealthCheckResponse {
    bool is_healthy = 1;
    string status = 2;
    int32 current_height = 3;
    int64 timestamp = 4;
}

service BlockchainService {
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
  rpc ProposeBlock(ProposeBlockRequest) returns (ProposeBlockResponse);
  rpc SubmitVote(VoteRequest) returns (VoteResponse);
  rpc CommitBlock(CommitBlockRequest) returns (CommitBlockResponse);
  rpc GetLatestBlock(GetLatestBlockRequest) returns (GetLatestBlockResponse);
  rpc GetStatus(StatusRequest) returns (StatusResponse);

  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}
